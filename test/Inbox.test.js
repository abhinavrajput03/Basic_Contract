const assert = require('assert'); //used for assertion for test
const ganache = require('ganache-cli'); //local eth test network
const Web3 = require('web3'); //comm. bwt javascript app and eth network
const provider = ganache.provider();
const web3 = new Web3(provider);


const {interface, bytecode} = require('../compile');

//mocha is a test running framework

//random test
// class Car{
//   park(){
//     return 'stopped';
//   }
//
//   drive(){
//     return 'vroom';
//   }
// }
//
// let car;
//
// beforeEach(() => {
//     car = new Car();
// });
//
// describe('Car', () => {
//
//     it('can park', () => {
//       assert.equal(car.park(),'stopped');
//     });
//
//     it('can drive', () => {
//       assert.equal(car.drive(),'vroom');
//     });
//
// });


let accounts;
let inbox;
const INITIAL_STRING = 'Hi there!';

beforeEach( async () => {
  //list of all accounts generated by ganache and using one account to deploy
  accounts = await web3.eth.getAccounts();

  inbox = await new web3.eth.Contract(JSON.parse(interface))
  .deploy({data: bytecode, arguments : [INITIAL_STRING] })
  .send({from: accounts[0], gas: '1000000' });

//  inbox.setProvider(provider);
});

describe('Inbox', () => {
  it('deploy a contrat', () => {
      assert.ok(inbox.options.address);
  });

  it('has a default message', async () =>{

    const message = await inbox.methods.message().call();
    assert.equal(INITIAL_STRING,message);
  });

  it('change the message', async () => {
    await inbox.methods.setMessage('bye').send({from: accounts[0] });
    const message = await inbox.methods.message().call();
    assert.equal('bye',message);

  });
});
